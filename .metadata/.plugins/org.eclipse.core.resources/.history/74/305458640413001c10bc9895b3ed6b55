package com.pim.service;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Path;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Positive;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.berker.servicebase.TrObjectMapper;
import com.fasterxml.jackson.core.type.TypeReference;
import com.pim.dto.ProductModel;
import com.pim.entity.ProductEntity;
import com.pim.repository.ProductRepository;

@Service
public class ProductService {

	@Autowired
	private ProductRepository repository;
	
	@Autowired
	private EntityManager entityManager;

	@Transactional(readOnly=true)
	public List<ProductModel> getByKategoryId(@NotNull @Positive Long categoryId) {
		CriteriaBuilder cb = entityManager.getCriteriaBuilder();
		
		 CriteriaQuery<ProductEntity> query = cb.createQuery(ProductEntity.class);
	        Root<ProductEntity> user = query.from(ProductEntity.class);

	        Path<Long> kategoryIdPath = user.get("category.id");

	        List<Predicate> predicates = new ArrayList();
	        
	            predicates.add(cb.equal(kategoryIdPath, categoryId));
	        
	        query.select(user)
	            .where(cb.or(predicates.toArray(new Predicate[predicates.size()])));

	        List<ProductEntity> productList=entityManager.createQuery(query)
	            .getResultList();
	        return TrObjectMapper.mapper.convertValue(productList, new TypeReference<List<ProductModel>>() {
			});
	}

}
